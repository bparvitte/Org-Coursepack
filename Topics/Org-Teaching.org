#+TITLE:     Topics: Org-Teaching
#+AUTHOR:    Joon Ro
#+EMAIL:     joon.ro@outlook.com
#+DESCRIPTION: org file for the topic Org-Teaching
#+CATEGORY: TOPIC
#+STARTUP: overview
#+STARTUP: hidestars

* Lectures
** Introduction to Org-Coursepack
:PROPERTIES:
:CUSTOM_ID: Lectures/Introduction
:END:
The Org-Coursepack provides a template for developing and managing teaching
materials using [[https://orgmode.org/manual/Export-settings.html][Org mode]], a major mode in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables][GNU Emacs]].
*** Advantages for Instructors
#+ATTR_REVEAL: :frag (appear)
- First, Org mode and modular design allow for more effective and efficient
  content creation.
  - Content updates get propagated across courses, semesters, and sections,
    minimizing the potential for inconsistencies
  - Minimizes redundancy when sharing content across courses, semesters, and
    sections
  
#+REVEAL: split

#+ATTR_REVEAL: :frag (appear)
- Second, instructors can enjoy the benefits of having a flexible export system and an output-specific export option.
  - Consistent content across multiple output formats
     - Slides (e.g., via reveal.js or Beamer backends)
     - Handouts (e.g., via the LaTeX or reStructuredText backends)
  - Selective formatting and presentation of components depending on output
    format
- Third, the template contains a) utility functions written in Emacs Lisp, b)
  shortcuts to Org mode functions, and c) pre-built tree structures, which
  allow automation of many tasks including:
  - Automatic class numbering
  - Automatic creation of key content including (but not limited to)
    - course schedule for syllabi;
    - agenda of lecture materials; and
    - exam keys.
*** Advantages for Students
#+ATTR_REVEAL: :frag (appear)
- Consistent, properly-formatted, and strategically presented course materials add to student engagement
- Availability of materials that are easier to digest and review outside the classroom
*** Requirements
- Org-Coursepack is a tool based on [[https://orgmode.org/manual/Export-settings.html][Org mode]], a major mode in [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables][GNU Emacs]]. It
  does not, however, require extensive previous experience with either, unless
  the user wants to make changes to pre-built scripts. Only the following basic knowledge is needed:
  - Emacs :: Text editing using Emacs
  - Org mode :: Org mode markup syntax. Org mode uses a
                straightforward markup language similar to Markdown and
                reStructuredText, and thus, it will be easy to learn for any user
                who is familiar with other markup languages.
** Quickstart Guide: Creating a course with Org-Coursepack 
:PROPERTIES:
:CUSTOM_ID: Lectures/Quickstart Guide
:END:
This quickstart guide will show you, step-by-step, how to create your course
with =Org-Coursepack=. We focus on creating syllabi and lectures, 
as they typically make up the majority of course content. Other course materials, such as 
assignments and exams, can be created in similar ways.
*** Copy and rename the =Template= directory and Org file
The quickstart guide uses =/= to refer the root path of Org-Coursepack. Make a copy of the =Template= directory (inside the =/Courses= directory). Change the names of the =Template= directory and
the =template.org= file inside the directory, so they reflect the name of the course you are creating the materials for. See example below (we changed the names to =Example Course=):

#+ATTR_LATEX: :width 8cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Course-renamed.png

#+REVEAL: split

It is common for the same course to be taught across multiple semesters. Hence, the course will include a =Semester= folder for each semester it is taught. This folder includes a semester Org file, which is used to pull and organize modular course materials that can be used across courses and/or semesters. The semester Org file can also contain semester-specific content, such as class dates, classroom information, or office hours. The semester Org file is used to export course content into appropriate output formats (e.g., slides or handouts).

The example below shows that the semester is 2020 Spring. You can rename the =Semester= folder and the =Semestor.org= inside that folder to reflect the semester in which you are teaching that course. 

#+ATTR_LATEX: :width 10cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Semester-renamed.png
*** Set local variables permissions in the semester Org file
When you open =2020 Spring.org= for the first time, it will 
show you the following warning about local variables:

  #+BEGIN_SRC emacs-lisp
  The local variables list in 2020 Spring.org
  contains values that may not be safe (*), and variables that are risky (**)
  
  Do you want to apply it?  You can type
  y  -- to apply the local variables list.
  n  -- to ignore the local variables list.
  !  -- to apply the local variables list, and permanently mark these 
        values (*) as safe (in the future, they will be set automatically.)
  #+END_SRC

This warning asks what you would like to do about the pre-set options contained in the file. For example, the option =org-confirm-elisp-link-function= is currently set to =nil=, which means that, when links containing Emacs scripts are clicked (e.g., for exporting), Emacs will not ask for your confirmation before the action is taken. You can type =!= to permanently set these options.

When the file is open, you will see the template for constructing a course for this semester:

#+ATTR_LATEX: :height 7cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Semester-Org-File.png

You can freely move the cursor around using the arrow keys. Drawers (e.g., =:LOCALSETUP:=)
and subtrees (e.g., =* Sections=) under the cursor can be expanded and
collapsed by pressing the =Tab= key:

#+ATTR_LATEX: :height 2cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Org-Expand.png

*** Rename paths to semester and course Org files specified in =#+INCLUDE= statements
The semester Org file has =#+INCLUDE= statements, which are used to pull content from other Org files (e.g., course Org file or other sections of the same semester Org file). The =#+INCLUDE= statements specify the paths to the Org files from which content are pulled. Rename these paths so the =#+INCLUDE= statements work properly.

Specifically, you should replace two file names in these paths.

First, replace all occurrences of =./Semester.org::= with the name
of your semester Org file (in the case of our example, =./2020 Spring.org::=). You can use the search-and-replace feature in
Emacs by pressing =M-%= (=Alt+Shift+5=) or via =Edit= -> =Replace= -> =Replace
String= menu).

The replace query will look like the following:

  #+BEGIN_EXAMPLE 
  Query replace ./Semester.org with: ./2020 Spring.org
  #+END_EXAMPLE
  
As shown below, =./Semester.org::= is replaced by =./2020 Spring.org::=:

#+LATEX: \begin{multicols}{2}
#+ATTR_LATEX: :height 3cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Semester-Rename-Semester-Before.png

#+ATTR_LATEX: :height 3cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Semester-Rename-Semester-After.png
#+LATEX: \end{multicols}
  
Repeat the same process for the template Org file. That is, replace =../Template.org::= with the name of your course Org file. See example below.

  #+BEGIN_EXAMPLE 
  Query replace ../Template.org:: with: ../Org-Coursepack-Quickstart-Guide.org::
  #+END_EXAMPLE

As shown below, =../Template.org::= is replaced by =../Org-Coursepack-Quickstart-Guide.org::=:

#+LATEX: \begin{multicols}{2}
#+ATTR_LATEX: :height 3cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Semester-Rename-Course-Before.png

#+ATTR_LATEX: :height 3cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Semester-Rename-Course-After.png
#+LATEX: \end{multicols}
*** Inputting course information
The first few lines of the semester Org file (see =2020 Spring.org=) contain information about this file, such as the =#+TITLE:= and
=#+DESCRIPTION:= of the file. Expanding the =:COURSE_INFO:= drawer will reveal several macros which have information about 
the course; the =COURSE= macro is for specifying the name of the course, =COURSE_NUM= is for specifying the course ID, and so on. They currently have filler values as shown in the first image below. You can fill the macro values with your own course information as shown second image below:

#+ATTR_LATEX: :height 6cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Semester-Course-Info.png

#+ATTR_LATEX: :height 6cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Semester-Course-Info-Edited.png

*** Preparing your syllabus
**** How syllabi are constructed

To reduce reduncancy, the top level =* Syllabus= tree simply pulls information from the course Org file (for course-related information common across sections and semesters; e.g., course description), the semester Org file (for semester-specific information; e.g., academic year or office hours), and section-level macros (which contain section-specific information; e.g., class time and location). See example syllabus below. 

#+ATTR_LATEX: :width 10cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Exported-Syllabus-Course-Info.png

You can change these content to fit your own course (TODO see page XX of the documentation).

**** Exporting a syllabus
Syllabus exporting occurs at the =Syllabus= subtree under each section's subtree (e.g, =* Sections/01/Syllabus=) to enable passing on section-specific information through macros (see macros below).

#+ATTR_LATEX: :width 10cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Section-Information-Properties.png

To export the syllabus in our example, navigate to the =* Sections/01/Syllabus= subtree, then expand the =:PROPERTIES:= drawer. When the drawer is expanded, you will see a clickable link named =LaTeX (Custom Time Format)= (see image below). Clicking this link will export the syllabus for Section 1 to a PDF file using LaTeX. You can find the exported file in the =Syllabus= sub-directory. You can also  click the =PDF= link in the same =:PROPERTIES:= drawer (see image below) to open the exported file.

#+ATTR_LATEX: :width 10cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Syllabus-Export-Link.png

**** Class Schedule
=Class Schedule= section needs more explanation since =Org-Coursepack= is
designed to automatically generate the schedule of classes for your syllabus
from the list of classes. Here we will discuss only schedule-related part of
the lectures, and describe how to change actual lecture content in the next
section.

*Lecture and Assignment Dates*
Let's take a look at the =* Lectures/Lecture and Assignment Dates= subtree.

#+ATTR_LATEX: :height 7cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lectures-Dates.png

Here, currently 4 assignment due dates and 28 class dates are defined. You can
adjust these dates following your teaching schedule. These dates will be used
when we update lecture information. Org mode provides a convenient way to
adjust dates. For instance, when the cursor is on a timestamp, one can easily
adjust dates by pressing =Up= and =Down= keys with =Shift= key.

*Adding Lectures* Under the subtree =Lectures=, subtrees with =skipcount= tag
are not actual lectures, they are either subtrees which have auxiliary
information (dates, etc) or ones that are for non-lecture events such as
assignment deadlines or holidays. Currently it has only one lecture,
=Introduction=:

#+ATTR_LATEX: :height 5cm
ㅚㅗfile:../../../Assets/Images/Org-Teaching/Quickstart_Lectures-Lectures.png

Let's add additional two lectures by copying & pasting the =Introduction=
subtree. Then, let's change the name of these lecture subtrees. We will simply
call them =Second Lecture= and =Third Lecture=:

#+ATTR_LATEX: :height 8cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lectures-Second-Lecture.png

*Updating Lecture Information* When you expand =:PROPERTIES:= of the =Second
Lecture=, you will notice that it has multiple information that needs to be
updated, such as =CLASS=, =EXPORT_FILE_NAME=, and =DATE=. =Org-Coursepack=
provides a convenient script =Update Lecture Information= written in
Emacs-lisp which update these values as well as other elements of lectures
that depend on the schedule (e.g., agenda of the current and the previous
lectures) automatically.

Move your cursor to the script named =Update Lecture Information=, which is
located right under the =Lectures= subtree headline. You can run this script
by =C-c C-c= (=CTRL+c= and =c= while pressing =CTRL= down). 

#+ATTR_LATEX: :height 3cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lectures-Run-Script-Update-Lectures.png

Emacs will ask to confirm, and you can press =y= key to do so.

#+ATTR_LATEX: :width 11cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lectures-Run-Script-Update-Lectures-Confirm.png

Upon running the script, you will notice that the rendering of the subtrees are broken:

#+ATTR_LATEX: :height 3cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lectures-Run-Script-Update-Lectures-After.png

You can simple press =Shift+Tab= to collapse all the subtrees to reset the rendering.

Now let's inspect =:PROPERTIES:= for the =Second Lecture= again. Press =Tab=
key to expand =:PROPERTIES:=:

#+ATTR_LATEX: :height 4cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lectures-Updated-Lecture-Info.png 

As you can see, the script has updated information for the second (and the
third) lecture appropriately. The class number reflects the order of the
subtree. Then, the script grabs the corresponding date from the date specified
in =* Lectures/Lecture and Assignment Dates=. It also extract the name of the
lecture from the subtree headline, and then use it and the class number to
construct =EXPORT_FILE_NAME=. The script also does other things, which we will
describe in the next section. For non-lecture items, you can tag them with
=skipcount= tag and the script will ignore them. You can edit tags of a headline 
with =C-c q= (=CTRL+c= and =q= while pressing =CTRL= down).

*Updating Schedule* Now we are ready to update the class schedule in
Syllabus. Navigate to =* Syllabus/Class Schedule=, and then place your cursor
to the line starting with =#+BEGIN: columnview=. If you expand the columnview, 
you will see that it has a table with previous classes. 

#+ATTR_LATEX: :height 5cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Syllabus-Schedule-Old.png

Pressing =C-c C-c= will update the table:

#+ATTR_LATEX: :height 5cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Syllabus-Schedule-New.png

As you can see, the columnview automatically extract relevant information from
each lecture subtree in creating the table. Hence, the user can freely
re-organize lectures and change their names without worrying about updating
lecture information or class schedule manually.

Of course, the updated schedule will be reflected when the user export the syllabus for a section:

#+ATTR_LATEX: :height 4cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Syllabus-Exported-Schedule.png

*** Preparing your lectures
**** Exporting slides and handouts
Similar to =Syllabus= subtree under each section subtree, a lecture subtree
has built-in export links available. You can click on =reveal.js= and =LaTeX=
links to export the lecture to slide and handout formats, respectively.

#+ATTR_LATEX: :height 6cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Export-Link.png

Let's export the lecture to both reveal.js and LaTeX output formats. The files
will be exported to =Lectures= sub-directory of the semester folder. Clicking
on =HTML= and =PDF= links will open the corresponding exported file.

The following two screenshots show the exported outputs, where it is showing
the slide overview for the reveal.js slides:

#+ATTR_LATEX: :height 9cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Exported_reveal.png

#+ATTR_LATEX: :height 8cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Exported_LaTeX.png

As you can see, the sections with =slideonly= (=handoutonly=) tag are not
exported in LaTeX (reveal.js) output. You can easily specify any content you
want to show in slides (e.g., announcements) or handouts (extended explanations)
only in this way.

Also, note that the contents for =Last Class= and =Lecture Agenda= under
=Introduction= section, and =Class Summary= section are automatically written
by =Update Lecture Information= script described earlier. Hence, users can
freely edit lecture content and the order of lectures without worrying about
tediously fixing these boilerplate parts. For example, after changing the
order of lectures, the user can simply run the script and the =Last Class=
slide of each lecture will correctly point to the previous lecture in the new
order.

See [[https://joonro.github.io/Org-Coursepack/Lectures/05%2520Exporting%2520Slides%2520and%2520Handouts.html][Exporting Slides and Handouts]] for more information about exporting
content, including setting up a key binding, which is convenient for repeated
exporting.
**** Editing lecture content
Let's add additional section to the lecture. Add a subtree called =New section= as the same
level as other sections (=*** New section=). 

#+ATTR_LATEX: :height 3.5cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_New_Section.png

You can freely use Org markup language, which is similar to other popular
markup languages such as Markdown and reStructuredText, to create your
content. The main differences are in Org mode, =*= is used to specify levels
of headings, and headings can have data associated with them in the form of
=:PROPERTIES:= and tags. In addition, navigating through a long document is 
convenient because all headings and drawers are collapsible. 

We show examples of several basic use cases here. For detailed instructions,
see [[https://joonro.github.io/Org-Coursepack/Lectures/04%2520Creating%2520Content%2520for%2520Slides%2520and%2520Handouts.html][Creating Content for Slides and Handouts]] section of the documentation and
[[https://orgmode.org/manual/index.html][Org manual]].

*Lists* Obviously you cannot use =*= to specify a list, but otherwise Org mode
uses a typical syntax (=-= or =+= for lists, =1.= for numbered lists) for
lists. For example,

#+ATTR_LATEX: :height 4cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Lists.png

*Math* you can directly input LaTeX math in Org mode. For example,

#+ATTR_LATEX: :height 1.8cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Math.png

*Slide split* in general, reveal.js will automatically create slide structure
from the lecture subtree. Sometimes, however, users might want to split a
slide into multiple slides. Users can put =#+REVEAL: split= to split a
slide. For example,

#+ATTR_LATEX: :height 1.8cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Split.png

*Fragmented contents* Fragmented contents such as lists can be easily
specified by putting =#+ATTR_REVEAL: :frag (appear)= before a list. For example:

#+ATTR_LATEX: :height 1.8cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Fragmented.png

*Images* Prepending =file:= to an image file path is sufficient to include a
local image to both slide and handout. For HTML, specifying =URL= is
sufficient for an image on the web. Note that using a relative path
(=../../../Assets/Images/=) is recommended for portability. To make the image
path consistent across LaTeX and HTML outputs, =<base href="../">= is set in
=/Assets/setup_Macros.org=.

One can also add HTML (e.g., =#+ATTR_HTML: :width 80%=) and LaTeX
(e.g., =#+ATTR_LATEX: :width 6cm=) attributes before an image link to adjust the
size of the image.

For example,

#+ATTR_LATEX: :height 2.5cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Images.png

*Hiding specific content* in addition to using =slideonly= and =handoutonly=
tags to selectively include specific subtree in export, since Org mode allows
embedding raw HTML and LaTeX code, it is easy to hide specific content based
on output format. Content surrounded by =#+LATEX: \iffalse= and =#+LATEX: \fi=
will not be shown in LaTeX outputs, and that surrounded by =#+REVEAL_HTML:
<span hidden>= and =#+REVEAL_HTML: </span>= will not be shown in reveal.js
output. For example, 

#+ATTR_LATEX: :height 5.5cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Hiding-Contents.png

The following screenshots show how they are exported:

#+LATEX: \begin{multicols}{2}
#+ATTR_LATEX: :width 7.5cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Hiding-Contents-reveal.js.png

#+ATTR_LATEX: :width 7.5cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Hiding-Contents-LaTeX.png
#+LATEX: \end{multicols}

**** Make contents reusable
One of the biggest advantage of using =Org-Coursepack= to prepare course
content is that users can put content in topic Org files, and include relevant
part in semester Org files as needed, leveraging Org mode's flexible inclusion
functionality. Putting contents on a central location and reusing them reduce
redundancy and managing them easier. For example, any improvements on content 
will be applied to all courses automatically, and users can put topic Org
files into version control and keep track of the improvements.

The following shows an example usage:

#+ATTR_LATEX: :height 0.8cm
file:../../../Assets/Images/Org-Teaching/Quickstart_Lecture-Editing_Include.png

Note that it is optional - users can put all course content to a semester Org
file directly. In fact, it is more convenient to do so when a course is
actively developed with new contents. We recommend, however, users to start
putting contents into relevant topic Org files as course content becomes more
stabilized. See [[https://joonro.github.io/Org-Coursepack/Lectures/08%2520Semester%2520Org%2520Files%25203%25204%2520Lectures.html][Lectures]] part of the documentation for more information.
*** Conclusion
That is it! See the slide deck and the handout generated with the above examples. 
** Org Mode Basic Functionalities
:PROPERTIES:
:CUSTOM_ID: Lectures/Org Mode Basic Functionalities
:END:
*** Headings
:PROPERTIES:
:CUSTOM_ID: Lectures/Org Mode Basics/Headings
:END:
- In Org mode, a heading is denoted by preceding stars (=*=), and the level of
  a heading is determined by the number of stars.
- For example,

  #+BEGIN_EXAMPLE
  ,* Heading 1
  ,** Subheading 1.1
  ,* Heading 2
  ,** Subheading 2.1
  #+END_EXAMPLE

- A heading can have tags and properties associated with them, which allows
  very flexible usage that we exploit throughout {{{COURSE}}}.
**** Tags
- A heading can have tags associated with them. They are used in the form of =:tag:=, on the same line as the heading. For example,

  #+BEGIN_EXAMPLE
  ,* Heading with a tag                       :tag:
  #+END_EXAMPLE
**** Properties
:PROPERTIES:
:CUSTOM_ID: Lectures/Org Mode Basics/Properties
:END:
- Each heading can have properties associated with it. You can think of
  properties as data specific for the heading, as they consist of
  =:PROPERTY_NAME:= and =PROPERTY VALUE= pairs.
- For example, a heading for a lecture can have property values for lecture
  number, file name for exports, etc. One of the frequently used properties is
  =:CUSTOM_ID:=, which can be used to locate the particular heading. See the
  =Including Content from Another Org file= section for how it is used in
  {{{COURSE}}}.
- See the [[https://orgmode.org/manual/Properties-and-columns.html][Org manual]] for more information.
  
- For example,
  #+BEGIN_EXAMPLE
  ,* Heading 1
  :PROPERTIES:
  :CUSTOM_ID: Heading 1
  :END:
  #+END_EXAMPLE
*** Macros
:PROPERTIES:
:CUSTOM_ID: Lectures/Org Mode Basics/Macros
:END:
Org mode provides macro replacement functionality. This can be especially
useful for instructors, as shown in the following cases.

- When defining terms that will be repeated within or across course-related
  materials, or needs to be changed in future semesters.
  - Example :: Suppose an instructor were to present a due date for
               "Assignment 1" in three different places (e.g., syllabus,
               lecture, and assignment guideline). By using a macro, an
               instructor can ensure that all documents have the same
               information, and make such updates easily in future
               semesters. Such a macro (named =DUE_ASSIGNMENT_1=) can be
               defined like the following:

    #+BEGIN_EXAMPLE
    ,#+MACRO: DUE_ASSIGNMENT_1 [2018-09-27 Thu]
    #+END_EXAMPLE

    One can then use the macro with ={{{MACRO_NAME}}}=. For example, all
    areas in documents where it says ={{{DUE_ASSIGNMENT_1}}}= will be
    replaced with =[2018-09-27 Thu]= upon export.

- When defining terms specific to a subtree (e.g., a specific class) that
  the instructor may want to use in multiple places. This can be useful when
  specifying class orders, class titles, or section numbers. One
  can achieve this by referring to property values of a subtree.
  - Example :: An instructor can define a class number property like the following:

    #+BEGIN_EXAMPLE
    ,* Heading
    :PROPERTIES:
    :CLASS:    2
    :END:
    #+END_EXAMPLE

    Then ={{{property(PROPERTY_NAME)}}}= will be replaced by
    the value of =PROPERTY_NAME= property:

    #+BEGIN_EXAMPLE
    This is class number {{{property(CLASS)}}}.
    #+END_EXAMPLE

- See the [[https://orgmode.org/manual/Macro-replacement.html][Org manual]] for more information.
*** Including Content from Another Org file
:PROPERTIES:
:CUSTOM_ID: Lectures/Org mode Basics/Including Content
:END:
- In Org mode, a user can pull content, without making a copy, from any org file (including
  the current one) via the =#+INCLUDE:= statement. See the [[https://orgmode.org/manual/Include-files.html][Org manual]] fore more information.

- Taking advantage of this functionality, the template is created so that its
  content is modular and can be pulled flexibly as needed. This feature is
  useful when sharing content across different courses or semesters or when
  revisiting past materials (e.g., in exam reviews or when reviewing past
  cases to build on them).

  - Example :: This is how an instructor would use the =#+INCLUDE:= statement
               to pull content from a subtree with =:CUSTOM_ID:= =R-squared=
               in the file =Regression.org= so it is presented across multiple
               courses (i.e., Statistics 101 and Marketing Research).
               =:only-contents t= option means only the contents of the
               subtree, not its heading and properties, will be included. To
               visit the included file, press =C-c '= while the cursor is on
               the =#+INCLUDE:= statement.

    - *=Regression.org=* {{{QUAD}}}

      #+LATEX: {\small
      #+BEGIN_EXAMPLE
      ,* R-squared
      :PROPERTIES:
      :CUSTOM_ID: R-squared
      :END:
      - The definition of \( R^{2} \) is:
        \[ R^{2} = 1 - \dfrac{SS_{\text{res}}}{SS_{\text{tot}}}\]
      #+END_EXAMPLE
  
    - *=Statistics 101.org=* {{{QUAD}}}

      #+BEGIN_EXAMPLE
      ,* Regression
      ,** R-squared
      ,#+INCLUDE: "/Regression.org::#R-squared" :only-contents t
      #+END_EXAMPLE
  
    - *=Marketing Research.org=* {{{QUAD}}}

      #+BEGIN_EXAMPLE
      ,* Regression
      ,** R-squared
      ,#+INCLUDE: "/Regression.org::#R-squared" :only-contents t
      #+END_EXAMPLE
      #+LATEX: }
  
** Init File
:PROPERTIES:
:CUSTOM_ID: Lectures/Init File
:END:
*** LaTeX: newpage
- This automatically insert =\clearpage= before in LaTeX export
** Directory Structure
:PROPERTIES:
:CUSTOM_ID: Lectures/Directory Structure
:END:
We present the directory structure of {{{COURSE}}}.

- */Assets* :: This folder contains:
  - Org setup files, which include frequently used macros (e.g., for LaTex
    formatting).
  - Supplementary course materials (if any), such as images, videos, or
    articles, for storage and access.
- */Assets/Institutions* :: This folder contains an institution Org file that
     includes institution-specific information (e.g., university policies);
     may have multiple Org files if teaching across multiple institutions.

- */Courses* :: Each unique course will have a subdirectory under =Courses=. A
                course is defined as a series of lectures occupying a given
                adademic calendar unit referred to as a semester. Same courses
                may be offered across multiple semesters. Note that a course
                may also have multiple sections in the same semester; for
                example, a Statistics 101 course may be offered to three
                different sets of students per semester.
- */Courses/Course* :: This folder contains:

  - A course Org file that includes permanent information about the course
    that remains consistent across semesters (e.g., syllabus items such as
    learning objectives, grading schemes).
  - A subfolder for each semester this course is taught.

- */Courses/Course/Semester* :: Each semester folder contains:
  - A semester Org file that includes information about the course that varies
    by semester (e.g., classroom location, course schedule, assignment due
    dates). The semester Org file also pulls information from other Org files,
    such as course, topic, and institution Org files, to complete the course
    development for that semester. In other words, this is the master file
    that compiles all course materials for exporting.
  - Subfolders are for exported course materials (if any) and are
    divided by type; i.e., Assignments, Lectures, Exams, and Syllabus.
- */Topics* :: This folder contains a topic Org file for each topic; these
               files are where course content (e.g., lecture slides and notes,
               exam questions, assignment guidelines) about specific topics
               are stored and accessed.
*** Example
The following example is the directory structure of this course, {{{COURSE}}}, as well as the template.

#+REVEAL_HTML: <span style=font-size:20pt>
#+LATEX: {\footnotesize
#+BEGIN_EXAMPLE
\
|
+---Assets
|   |   setup_Macros.org
|   |
|   +---Institutions
|           JOSE.org
|           Template.org
|
+---Courses
|   +---Org-Coursepack
|   |   |   Org-Coursepack.org
|   |   |
|   |   +---2020 Spring
|   |       |   2020 Spring.org
|   |       |
|   |       +---Assignments
|   |       |   |   Assignment 1.pdf
|   |       |   |   Assignment 1.tex
|   |       |
|   |       +---Lectures
|   |       |   |   01 Introduction.pdf
|   |       |   |   01 Introduction.tex
|   |       |
|   |       +---Exams
|   |       |   |   Exam 1.pdf
|   |       |   |   Exam 1.tex
|   |       |
|   |       +---Syllabus
|               |   Syllabus (Section 1).pdf
|               |   Syllabus (Section 1).tex
|   |
|   +---Template
|       |   Template.org
|       |   
|       +---Semester
|           |   Semester.org
|           |   
|           +---Assignments
|           |   |   Assignment_1.pdf
|           |   |   Assignment_1.tex
|           |           
|           +---Exams
|           +---Lectures
|           |   |   01 Introduction.pdf
|           |   |   01 Introduction.tex
|           |   |   
|           |           
|           +---Syllabus
|               |   Syllabus (Section 1).pdf
|               |   Syllabus (Section 1).tex
|
+---Topics
    |   Org-Teaching.org

#+END_EXAMPLE
#+LATEX: }
#+REVEAL_HTML: </span>

** Topic Org Files
:PROPERTIES:
:CUSTOM_ID: Lectures/Topic Org Files
:END:

A topic Org file contains course content (e.g., lecture slides and
notes, exam questions, assignment guidelines) for a given topic. Its
general structure is shown below, using an example of Regression as a
teaching topic. The top section (where lines start with =#+=) has
metadata for the Org file. Including meta data is optional.

  #+BEGIN_EXAMPLE
  ,#+TITLE:     Topics: Regression
  ,#+AUTHOR:    Your Name
  ,#+EMAIL:     Your Email
  ,#+DESCRIPTION: Topic Org file for Regression
  ,#+CATEGORY: TOPIC
  ,#+STARTUP: overview
  ,#+STARTUP: hidestars

  ,* Lectures
  ,* Assignments
  ,* Exercises
  ,* Questions
  #+END_EXAMPLE
*** Organizing Content in Topic Org Files
:PROPERTIES:
:CUSTOM_ID: Lectures/Topic Org Files/Organizing Content 
:END:
#+ATTR_REVEAL: :frag (appear) 
- In most cases, course content would be created in a topic Org file (e.g., a
  topic Org file that covers Regression), each consisting of multiple
  sub-topics (e.g., subtopics of Regression such as, Estimation, Interpretation, R-squared). Sub-topics are
  organized in the form of a subtree as shown in the example below.

  #+BEGIN_EXAMPLE
  ,* Lectures
  ,** Estimation
  :PROPERTIES:
  :CUSTOM_ID: Lectures/Estimation
  :END:
  ,** Interpretation
  :PROPERTIES:
  ,** R-Squared
  :PROPERTIES:
  #+END_EXAMPLE

- Each sub-topic should have a =:CUSTOM_ID:= property, as shown in the example
  above, so it can be included in another file, such as a semester Org file.

  #+BEGIN_mdframed
  On a related note, an important consideration when creating a topic
  Org file is the fact that the content in it has the potential to be
  included in multiple different semester Org files. Hence, an
  instructor who, for instance, plans to teach the same topic (e.g.,
  Regression) or sub-topic (e.g., R-squared) in different courses
  (e.g., Statistics 101 and Marketing Research) would benefit from not
  making references to a specific course in the topic Org file.
  #+END_mdframed

- The Org-Coursepacket includes multiple topic Org files located in the the
  =Topics= folder.
- A topic org file can contain relevant assignments, exercises, and exam
  questions under corresponding subtrees.
** Course Org Files
:PROPERTIES:
:CUSTOM_ID: Lectures/Course Org Files
:END:

#+ATTR_REVEAL: :frag (appear)
A course Org file contains permanent information for the corresponding
course, that is, information about the course that remains consistent across semesters
(e.g., learning objectives, grading schemes).

#+REVEAL: split

We will now review the structure and contents of the course Org
file. The example below shows the highest-level headings of the course
Org file for Org-Coursepack -- i.e., Courses and Syllabus.

  #+BEGIN_EXAMPLE
  ,#+TITLE:     Course: Org-Coursepack
  ,#+AUTHOR:    Your Name
  ,#+EMAIL:     Your Email
  ,#+DESCRIPTION: org file for Org-Coursepack
  ,#+CATEGORY: COURSE
  ,#+STARTUP: overview
  ,#+STARTUP: hidestars
  
  ,* Courses
  ,* Syllabus
  #+END_EXAMPLE

The =Courses= tree can have a subtree for each semester teaching this
course. See example below. Note that, in the actual course Org file,
semester subtrees are links to their respective semester Org files.

  #+BEGIN_EXAMPLE
  ,* Courses
  ,** 2020 Spring
  #+END_EXAMPLE

The =Syllabus= subtree containts partial content for the syllabus,
specifically, information about the course that remains consistent
across semesters (e.g., =Course Description=, =Learning
Objectives=, grading scheme). See an example of the =Syllabus=
tree with only the =Course Description= subtree expanded.

  #+BEGIN_EXAMPLE
  ,* Syllabus
  ,** Course Description
  :PROPERTIES:
  :CUSTOM_ID: Syllabus/Course Description
  :END:
  Course description here
  ,** Student Learning Objectives
  ,** Course Material
  ,** Grading
  ,** Specific Course Policies
  #+END_EXAMPLE

** Semester Org Files
:PROPERTIES:
:CUSTOM_ID: Lectures/Class Files
:END:
*** Introduction
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Introduction
:END:
#+ATTR_REVEAL: :frag (appear)
A semester Org file is the master file for the course in a given
semester. That is, a semester Org file, which is where
semester-specific information about the course (e.g., classroom
location, course schedule, etc.) is stored, is also where materials
from other Org files are pulled as the instructor contructs the
course to create a syllabus, lectures, exams, assignments, etc. It can
accommodate multiple sections of the same course offered in the semester.

#+REVEAL: split

The example below shows the top-level contents of a semester Org file,
with all the trees and drawers collapsed. We will dedicate several
lectures to cover each component, following the order in which they are presented in the example.

  #+BEGIN_EXAMPLE
  ,#+TITLE:     Org-Coursepack: 2020 Spring
  ,#+AUTHOR:    Your Name
  ,#+EMAIL:     Your Email
  ,#+DESCRIPTION: Org-Coursepack: 2020 Spring
  ,#+CATEGORY: Teaching
  
  :LOCALSETUP:
  
  :SETUP_EXPORT:
  
  :SEMESTER_INFO:
  
  ,* Tasks
  ,* Sections
  ,* Syllabus
  ,* Classes
  ,* Exams                                                               :Exams:
  ,* Assignments                                                   :Assignments:
  ,* Local Variables
  #+END_EXAMPLE

*** Metadata and Drawers
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Export Options and Macros
:END:
The file starts with multiple metadata definitions, such as =TITLE=
and =AUTHOR=, which also act as global export keywords. This is
followed by three drawers containing various macros and export
options, which will be used across the file.

  #+BEGIN_EXAMPLE
  ,#+TITLE:     Org-Coursepack: 2020 Spring
  ,#+AUTHOR:    Your Name
  ,#+EMAIL:     Your Email
  ,#+DESCRIPTION: Org-Coursepack: 2020 Spring
  ,#+CATEGORY: Teaching
  
  :LOCALSETUP:
  
  :SETUP_EXPORT:
  
  :SEMESTER_INFO:
  #+END_EXAMPLE
**** =:LOCALSETUP:= Drawer
#+ATTR_REVEAL: :frag (appear)
The =:LOCALSETUP:= drawer has startup options (=#+STARTUP=) for the
Org file as well as a couple of =#+SETUPFILE='s which import necessary
macros from the dedicated macro Org file
(=../../../Assets/setup_Macros.org=) and school Org file
(=../../../Assets/Institutions/School.org=). Note that one can visit each
file with =C-c '=. Absolute paths can be used instead of relative
ones.

  #+REVEAL: split

  #+BEGIN_EXAMPLE
  :LOCALSETUP:
  ,#+STARTUP: overview
  ,#+STARTUP: hidestars
  ,#+STARTUP: indent
  
  ,#+SETUPFILE: ../../../Assets/setup_Macros.org
  
  ,#+SETUPFILE: ../../../Institutions/School.org
  :END:
  #+END_EXAMPLE
**** =:SETUP_EXPORT:= Drawer
#+ATTR_REVEAL: :frag (appear)
The =:SETUP_EXPORT:= drawer has export related options, mainly those
related to =org-reveal= (e.g., handouts). For example, =#+REVEAL_ROOT=
should specify the location of =reveal.js= (see the [[https://github.com/yjwen/org-reveal/][org-reveal
documentation]] for more information). The semester Org file for
{{{COURSE}}} specifies reveal.js 3.6.0 from a CDN. See the [[https://orgmode.org/manual/Export-settings.html][Org manual]]
for more general information about export options.

  #+REVEAL: split

  #+LATEX: {\small
  #+BEGIN_EXAMPLE
  :SETUP_EXPORT:
  ,#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.6.0
  
  ,#+REVEAL_PLUGINS: (classList markdown zoom notes highlight)
  
  ,#+EXCLUDE_TAGS: noexport
  ,#+OPTIONS: reveal_history:t tags:nil timestamp:nil todo:nil
  
  ,#+REVEAL_THEME: simple
  ,#+REVEAL_TRANS: linear
  :END:
  #+END_EXAMPLE
  #+LATEX: }
**** =:SEMESTER_INFO:= Drawer
The =:SEMESTER_INFO:= drawer has macros containing information about
the course that is common across sections but specific to the semester.

#+BEGIN_mdframed
Course name and number are categorized as semester-specific information, as they may change over time.
#+END_mdframed

  #+BEGIN_EXAMPLE
  :SEMESTER_INFO:
  ,#+MACRO: COURSE Org Teaching Template
  ,#+MACRO: COURSE_NUM ORG 0000
  ,#+MACRO: SEMESTER 2020 Spring
  ,#+MACRO: OFFICE_HOURS Tue 3:30-4:30pm
  :END:
  #+END_EXAMPLE
*** Tasks Top-level Tree
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Tasks
:END:
This is the subtree where users can organize instruction-related tasks
(TODO items) specific to the semester, e.g., reminders to post
announcements or grades. See the [[https://orgmode.org/manual/TODO-items.html][Org manual]] for more information on
how to use TODO items in Org mode.
*** Sections Top-level Tree
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Sections
:END:

#+ATTR_REVEAL: :frag (appear)
An instructor may teach multiple sections of the same course during a
given semester. The =Sections= subtree contains a subtree for each
section, which contains section-specific information such as section
number, classroom location and time, and exam dates. It also acts as a
wrapper around the content of the syllabus, which passes on section-specific
information.
  
  #+REVEAL: split

  #+BEGIN_EXAMPLE
  ,* Sections
  :PROPERTIES:
  ,** 01
  ,** 02
  ,** 03
  #+END_EXAMPLE
**** =:PROPERTIES:=
- :Properties: of these subtrees have information common across all sections,
  such as LaTeX preamble items via =EXPORT_LATEX_HEADER=. These will be
  inherited and shared by the subtrees with the
  ~org-use-property-inheritance~ option set to =t=. For example:
  #+LATEX: {\footnotesize
  #+BEGIN_SRC latex
  ,* Sections
  :PROPERTIES:
  :CUSTOM_ID: Sections
  :EXPORT_LATEX_CLASS: koma-article
  :EXPORT_LATEX_CLASS_OPTIONS: [article,letterpaper,times,10pt,listings-bw,microtype]
  :EXPORT_LATEX_HEADER+: \usepackage[onehalfspacing]{setspace}
  :EXPORT_LATEX_HEADER+: \usepackage[T1]{fontenc}
  :EXPORT_LATEX_HEADER+: \usepackage{mathpazo} \usepackage[scaled=0.85]{helvet} \usepackage{courier}
  :EXPORT_LATEX_HEADER+: \usepackage{geometry} \geometry{left=1in,right=1in,top=1in,bottom=1in}
  :EXPORT_LATEX_HEADER+: \usepackage[framemethod=default]{mdframed}
  :EXPORT_DATE: {{{SEMESTER}}}
  :EXPORT_OPTIONS: num:nil title:nil toc:nil tags:nil
  :END:
  #+END_SRC
  #+LATEX: }
**** Sections
- Each section subtree has properties and macros for the section
  information and a subtree for the syllabus of the section:

  #+BEGIN_EXAMPLE
  ,** 01
  :PROPERTIES:
  :MACROS_Section_Info:
  ,*** Syllabus
  #+END_EXAMPLE
***** =:PROPERTIES:=
Each section subtree has property items containing section-specific
information such as =:SECTION:= (section number), =:SECTION_LOC:=
(classroom location), =:SECTION_DATE:= (class date and time), and
=:SECTION_DATE_FINAL_EXAM:= (final exam date), which will be used in
the syllabus via the ={{{property(Property_NAME)}}}= grammar (e.g.,
={{{property(SECTION_DATE)}}}=). Note that we created a macro
={{{DATE_FINAL_EXAM_01}}}= for =:SECTION_DATE_FINAL_EXAM:=, so it can be
used in other places, such as class announcements.

  #+BEGIN_EXAMPLE
  ,** 01
  :PROPERTIES:
  :SECTION: 01
  :SECTION_DATE: Tue/Thurs, 9:30a-10:45
  :SECTION_DATE_FINAL_EXAM: {{{DATE_FINAL_EXAM_01}}}
  :SECTION_LOC: BLDG 100
  :CUSTOM_ID: Sections/01
  :END:
  #+END_EXAMPLE
***** Macros
#+ATTR_REVEAL: :frag (appear)
- Instructors can specify the final exam date in the
  =:MACROS_Section_Info:= drawer.
- To allow this information to be used in other places (e.g.,
  reminders or announcements), we used a macro instead of a property.

  #+BEGIN_EXAMPLE
  ,** 01
  :PROPERTIES:
  :MACROS_Section_Info:
  #+MACRO: DATE_FINAL_EXAM_01 [2018-12-16 Sun 13:00] - 4:00PM
  :END:
  #+END_EXAMPLE
***** Syllabus
- The =Syllabus= subtree has properties containing section-specific
  information for the section's syllabus. For its body, it pulls content
  from the =Syllabus= subtree of the file.
  #+BEGIN_EXAMPLE
  ,*** Syllabus
  :PROPERTIES:
  #+INCLUDE: "./2020 Spring.org::#Syllabus" :only-contents t
  #+END_EXAMPLE
- =:PROPERTIES:= of this subtree contain export-related information for the
  syllabus, such as =:EXPORT_FILE_NAME:=.
  
  #+BEGIN_EXAMPLE
  ,*** Syllabus
  :PROPERTIES:
  :EXPORT_TITLE: {{{COURSE_NUM}}}-{{{property(SECTION)}}} Syllabus
  :EXPORT_FILE_NAME: ./Syllabus/01_Syllabus
  :EXPORT_TO:  LaTeX (Custom Time Format)
  :OUTPUT_VIEW: PDF
  :END:
  #+END_EXAMPLE
- The syllabus subtree simply includes in its body the content of the top level =Syllabus= tree. Since
  property macros are used for section-specific information in the content,
  the corresponding section-specific information will be included automatically.
  
  #+BEGIN_EXAMPLE
  ,*** Syllabus
  :PROPERTIES:
  #+INCLUDE: "./2020 Spring.org::#Syllabus" :only-contents t
  #+END_EXAMPLE
*** Syllabus Top-level Tree
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Syllabus
:END:
The =Syllabus= subtree contains course description, learning
objectives, grading, etc., as shown in the example below. Instructors
can include additional information as they see fit. We now describe each
subtree.

  #+REVEAL: split

  #+BEGIN_EXAMPLE
  ,* Syllabus
  ,** Tasks [0/1]                                                     :noexport:
  ,** Intro                                                            :ignore:
  ,** Course Description
  ,** Course Prerequisites
  ,** Student Learning Objectives
  ,** Course Material
  ,** Grading
  ,** Specific Course Policies
  ,** School-Specific Policies
  ,** Class Schedule                                                   :newpage:
  #+END_EXAMPLE
**** Intro
#+ATTR_REVEAL: :frag (appear)
The Intro has the title page of the Syllabus. The title page contains a blank
school name (the color of the text is defined in the institution Org file) as a
placeholder for the school logo the instructor wishes to use. There is
also a table of course information, which heavily relies on macros
to avoid redundancy.

Some of the macros are in the form of =property(PROPERTY_NAME)= (e.g.,
={{{property(SECTION_DATE)}}}=), which means it will receive the value of the
=:PROPERTY_NAME:= property of the subtree. When the content is included in
another subtree such as the =Sections= subtree, these property macros will pull
the value from the subtree including this content. That is,
={{{property(SECTION_DATE)}}}= will get the value from the =:SECTION_DATE:=
property of the =01= (=02=) subtree of the =Sections= subtree when
included by the =01= (=02=) subtree.

Note that the header of the Intro subtree is assigned an =:ignore:= tag, which means the heading (=Intro=)
will be ignored in exporting.

  #+LATEX: {\scriptsize
  #+BEGIN_EXAMPLE
  ,** Intro                                                            :ignore:
  @@latex:\definecolor{SchoolColor}{RGB}{@@{{{SCHOOL_COLOR}}}@@latex:}@@

  ,#+BEGIN_CENTER
  ,#+LATEX: {\color{SchoolColor}{\Large
  *{{{SCHOOL}}}*
  ,#+LATEX: }}
  ,#+END_CENTER
  
  ,#+BEGIN_CENTER
  ,#+LATEX: {\color{SchoolColor}{
  *{{{COURSE_NUM}}}-{{{property(SECTION)}}}*
  
  *{{{COURSE}}}*
  
  *{{{SEMESTER}}}*
  ,#+LATEX: }}
  ,#+END_CENTER
  
  {{{VSPACE(5)}}}
  
  | *Instructor:*               | {{{PROFESSOR}}}              | *Office Phone:*   | {{{PHONE}}}                 |
  | *Office:*                   | {{{OFFICE}}}                 | *E-mail:*         | {{{EMAIL}}}                 |
  | *Office Hours:*             | {{{OFFICE_HOURS}}}           | *Course Site:*    | *{{{COURSE_LINK}}}*         |
  | *Class Meeting Day & Time:* | {{{property(SECTION_DATE)}}} | *Class Location:* | {{{property(SECTION_LOC)}}} |
  #+END_EXAMPLE
  #+LATEX: }
**** Course-speific information
#+ATTR_REVEAL: :frag (appear)
- Since different sections of the same course typically share common elements (e.g.,
  course description, prerequisites, learning objectives), the
  content of most subtrees of =Syllabus= are pulled from the course Org
  file on exporting, using =#+INCLUDE=.
- Note that instructors can use semester-specific information in these subtrees using macros -- see the =Grading= subtree for an example.
- School-wide information (e.g., grade cutoff percentages) is imported
  from the institution Org file.
**** Class Schedule
#+ATTR_REVEAL: :frag (appear)
- The =Class Schedule= subtree contains the class schedule in a table format.
- The table is dynamically generated using org-mode's [[https://orgmode.org/manual/Capturing-column-view.html#Capturing-column-view][columnview dynamic block]]
  functionality -- it will extract information about each class from the class
  subtree's properties, and automatically create the class schedule table.

  #+REVEAL: split

- One can use =C-c C-c= while the cursor is on the =#+BEGIN: columnview= to
  update the columnview dynamic block. Once it is updated, =#+TBLFM= is used
  to format the table (e.g., change the third column name from =ITEM= to
  =Topic=) automatically.

#+BEGIN_COMMENT
- This, combined with a Emacs-lisp script (=Update Lectures=) contained in
  =Lectures= subtree, which automatically updates individual class information,
  allows the user to freely modify individual classes and their order without
  worrying about manually adjusting the class schedule. Hence, once
  modifications to classes are done, the user can run the source code block
  with =C-c C-c= to update properties of classes, and then update the
  columnview dynamic block to obtain the updated class schedule table. See the
  class on Lectures for more information about =Update Lectures= script.

#+END_COMMENT
*** Lectures Top-level Tree
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Lectures
:END:
- The =Lectures= top-level tree, which is the basis for the class
  schedule table, contains a subtree for each class and event (e.g.,
  assignment, exam). See the example below.

  #+REVEAL: split

  #+LATEX: {\small
  #+BEGIN_EXAMPLE
  ,* Lectures
  :PROPERTIES:
  
  ,#+NAME: Update Classes
  ,#+BEGIN_SRC emacs-lisp :results none
  
  ,** Tasks [0/1]                                           :noexport:skipcount:
  ,** Classes and Assignments Dates                                  :skipcount:
  ,** Introduction
  ,** Org Mode Basics
  ,** ...
  ,** _Assignment 1 Due_                     :Assignment:skipcount:
  ,** _Exam 1_                                                           :Exam:
  ,** *Thanksgiving Holiday*                                 :Holiday:skipcount:
  ,** _Final Exam_                                                   :skipcount:
  #+END_EXAMPLE
  #+LATEX: }
**** =:PROPERTIES:=
#+ATTR_REVEAL: :frag (appear)
- The properties of the =Lectures= top-level tree contain information common
  across lectures such as export options, including the handout LaTeX
  headers (e.g., syntax highlighting options for the =minted= package). With
  the =org-use-property-inheritance= option set to =t=, the settings will be
  propagated to its subtrees. For example, the =:EXPORT_LATEX_HEADER+:=
  property items, which specify the preamble for LaTeX lecture handouts, will
  be shared by all lecture subtrees.

  #+REVEAL: split

- The =COLUMNS= and =ID= properties of the =Lectures= top-level tree
  are used to create the class schedule columnview dynamic block
  described in =Syllabus=.

  #+LATEX: {\footnotesize
  #+BEGIN_EXAMPLE
  :PROPERTIES:
  :COLUMNS: %Date %Class %ITEM
  :ID:  79d5e887-4637-43e7-8e8a-b83fa83ee56e
  ...
  :END:
  #+END_EXAMPLE
  #+LATEX: }

**** =Update Lectures= Source Code Block
- The =Lectures= top-level tree has a source code block named =Update
  Lectures=. When executed with =C-c C-c=, it is designed to go through
  each lecture subtree and perform the following actions:
 
  1. Update =:PROPERTIES:= for the lecture, such as the class number
     (=:CLASS:=), class date (=:DATE:=), and file name of the export
     (=:EXPORT_FILE_NAME:=).
     
     - =:CLASS:= :: The lectures are assumed to be in the order of the
                    lecture schedule (e.g., first lecture on Class
                    1). Note that any subtree with a =:skipcount:= tag
                    will be ignored, which is useful for
                    non-lecture subtrees (e.g., assignment due dates
                    and holidays).
     - =:DATE:= ::  It will get the date of each class from the =DATE_CLASS_XX= file-level
                   properties, which are defined in the =Lectures and
                   Assignments Dates= subtree.
     - =:EXPORT_FILE_NAME:= :: By default, the script sets the
          =:EXPORT_FILE_NAME:= as the subtree heading, which can be
          overridden by setting the =:EXPORT_FILE_NAME_MANUAL:=
          property of the lecture subtree. If the property exists, the
          script will use its value for =:EXPORT_FILE_NAME:=
          instead. This is useful when the lecture subtree heading is
          very long or contains invalid characters for a file name.

  2. Update =Lecture Agenda= under the =Introduction= subtree.

     - =Lecture Agenda= :: The script will get the list of subtrees
          that belong to the particular lecture, ignoring any with
          =noexport=, =handoutonly=, or =slideonly= tags. Then, it
          will insert the list into the body of =Lecture Agenda=. In
          addition, it will set the =CUSTOM_ID= property value of the
          subtree accordingly, so the agenda can be used in other
          places.
          
  3. Update =Last Class= under the =Introduction= subtree and =Class Summary= of
     each lecture. 

     - =Last Class= :: The script will insert an =#+INCLUDE:=
                       statement which points to the previous
                       lecture's =Lecture Agenda= subtree under the
                       =Introduction=. This is to provide a recap of
                       the previous lecture prior to starting the
                       current lecture.

     - =Class Summary= :: The script will insert an =#+INCLUDE:=
          statement which points to the current lecture's =Lecture
          Agenda= subtree under the =Introduction=. This provides a
          summary of the current lecture.

- The user should run this script before updating the class schedule table 
  in the =Syllabus=, so the most current information is reflected in the table.
**** =Lectures and Assignments Dates= Subtree
- In this subtree, instructors can define lecture dates and assignment
  due dates as file-level properties. For example,

  #+BEGIN_EXAMPLE
  ,#+MACRO: DUE_ASSIGNMENT_1 [2018-09-27 Thu]
  ,#+MACRO: DUE_ASSIGNMENT_2 [2018-10-30 Tue]
  
  ,#+DATE_CLASS_01: [2018-08-28 Tue]
  ,#+DATE_CLASS_02: [2018-08-30 Thu]
  #+END_EXAMPLE

- The =Update Lectures= source code block will use the dates defined
  in the file-level properties as shown above to update the date of each lecture.

- 28 lecture/class dates are pre-defined in the
  {{{COURSE}}}. Instrutors can easily customize them to meet their needs.
**** =Common Items= Subtree
- The =Common Items= subtree has common items across all lectures. Currently
  there is one subtree, =Handout heading=, which contains LaTeX codes for
  header items and table of contents. The content will be included from the 
  =Handout heading= subtree of each individual lecture subtree.
**** Dynamic Columnview of Lectures
- A useful functionality of Org mode is the ability to create a
  table-view overlay of subtrees with their property
  values. Instructors can use the ~org-columns~ command to create a column-view of
  lectures, which is essentially the same as the class schedule table
  in the =Syllabus=. It is useful when there is a need to quickly inspect
  the overall course schedule.
*** Individual Lecture Subtrees
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Individual Lecture Subtree
:END:
Each lecture subtree contains the teaching materials for that particular lecture/class. The
example below shows the general structure of the subtree.

  #+BEGIN_EXAMPLE
  ,** Introduction
  :PROPERTIES:
  ,*** Tasks [0/1]                                                  :noexport:
  ,*** Handout heading                                    :handoutonly:ignore:
  ,*** Introduction                                                :slideonly:
  ,*** Introduction to {{{COURSE}}}
  ,*** Overview of the Directory Structure
  ,*** Summary                                                     :slideonly:
  #+END_EXAMPLE
**** =:PROPERTIES:=
#+ATTR_REVEAL: :frag (appear)
- A lecture subtree has properties containing lecture-specific information.
- As described earlier, =:CLASS:= (class number), =:EXPORT_FILE_NAME:=, and =:DATE:= (class date) will be
  automatically updated by the =Update Lectures= source code block.
- The =:EXPORT_TO:= property has clickable links written in Emacs-lisp, which will
  export class content to the designated output format. For example, clicking
  =reveal.js= will export content to reveal.js slides.
- The =:OUTPUT_VIEW:= property has links that, when clicked,
  opens the corresponding output files, such as html or pdf files. The
  links will use the value of the =:EXPORT_FILE_NAME:= property as the
  file path; hence, it is unnecessary to manually edit the output
  links.

  #+REVEAL: split

  #+LATEX: {\small
  #+BEGIN_EXAMPLE
  ,** Introduction
  :PROPERTIES:
  :CLASS:    1
  :EXPORT_TITLE: Class {{{property(CLASS)}}}: {{{property(ITEM)}}}
  :EXPORT_FILE_NAME: ./Classes/01 Introduction
  :DATE:     [2018-08-28 Tue]
  :EXPORT_TO:  reveal.js | Beamer | LaTeX 
  :OUTPUT_VIEW: HTML | PDF
  :END:
  #+END_EXAMPLE
  #+LATEX: }
**** Tasks
The =Tasks= subtree contains lecture-specific tasks you may have as an
instructor. These are presented in the form of [[https://orgmode.org/manual/TODO-items.html][Org mode TODO
items]]. The =:noexport:= tag prevents the tree from being exported.
**** Handout heading
The =Handout heading= subtree will only be included in a handout export (with the
=:handoutonly:= tag). It includes the content from =Handout heading= subtree of the 
=Common Items= subtree in the =Lectures= top-level tree.
**** Introduction
The =Introduction= has three subheadings:

  #+LATEX: {\small
  #+BEGIN_EXAMPLE
  ,*** Introduction                                                :slideonly:
  ,**** Announcements
  ,**** Last Class
  ,**** Lecture Agenda
  #+END_EXAMPLE
  #+LATEX: }

Instructors can enter any announcements to be made in class in =Annoucements=;
=Last Class= includes a recap of the learning objectives from the previous
class; =Lecture Agenda= lists the learning objectives for the current lecture.

Note that the content (=#+INCLUDE:= statements) and properties (e.g.,
=CUSTOM_ID=) of the latter two subheadings will be automatically updated by the =Update Lectures=
script as discussed earlier.

With the =:slideonly:= tag, the =Introduction= will only be exported to slide
outputs.
**** Content
Subtrees following the =Introduction= subtree contain lecture content.
To minimize redunancy, lectures should draw as much material from the reusable
content in the topic Org file subtrees as possible. See example
below. (For more examples, see =2020 Spring.org= in =Org_Teaching=.)

  #+LATEX: {\footnotesize
  #+BEGIN_EXAMPLE
  ,*** Topic Org Files
  #+INCLUDE: "../../../Topics/Org_Teaching.org::#Lectures/Topic Org Files" :only-contents t
  ,*** Course Org Files
  #+INCLUDE: "../../../Topics/Org_Teaching.org::#Lectures/Course Org Files" :only-contents t
  #+END_EXAMPLE
  #+LATEX: }

**** Class Summary
The =Class Summary= reviews the content of the current class, by including the content of =Lecture
Agenda= in the =Introduction= subtree.  The =#+INCLUDE:= statement will be
automatically generated by the =Update Lectures= script as described earlier.
With the =:slideonly:= tag, =Class Summary= will only be exported in slide outputs.
*** Exams Top-level Tree
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Exams
:END:
#+ATTR_REVEAL: :frag (appear)
Instructors can create content for exams as they wuold for
lectures. Lists can be used to create multiple choice questions. See
the Org mode [[https://orgmode.org/manual/Plain-lists.html][manual]] for more information. To minimize redundancy,
exams are designed to be modular and common elements are shared as
much as possible. Furthermore, Org mode's property inheritance allows
instructors to conveniently create answer keys to multiple choice
questions and to export the exam with or without the keys.

  #+REVEAL: split
  
As shown in the following example, there are two subtrees in the
{{{COURSE}}}: one for the exam title page and another for the mid-term
exam.

  #+BEGIN_EXAMPLE
  ,* Exams                                                          :Exams:
  :PROPERTIES:
  ,** Title Page
  ,** Mid-Term Exam
  #+END_EXAMPLE
  
**** =:PROPERTIES:=
#+ATTR_REVEAL: :frag (appear)
The properties have general information common across exams, such as LaTeX headers.
**** =Title Page= Subtree
#+ATTR_REVEAL: :frag (appear)
The content of this subtree will be shared across exams via the
=#+INCLUDE= statement. Instructors can include general information
pertaining to exams (e.g., student code of conduct) in this page. Note
that any information about a specific exam (e.g., exam date, exam
time, number of questions) can be specified by passing property values
to the =Title Page= subtree. For example, the exam time information
uses the value of the property =TIME= using ={{{property(TIME)}}}=.
**** Exam subtree
#+ATTR_REVEAL: :frag (appear)
The mid-term exam subtree in the {{{Course}}} has the following structure:

  #+BEGIN_EXAMPLE
  ,** Mid-Term Exam
  :PROPERTIES:
  ,*** 01
  ,*** 02
  ,*** Exam Content
  #+END_EXAMPLE

Each exam has a separate subtree for each course section, and they will
share common =Exam Content=.
***** =:Properties:=
#+ATTR_REVEAL: :frag (appear)
Each exam subtree has properties containing information common across sections. See example below.
  #+BEGIN_EXAMPLE
  :PROPERTIES:
  :CUSTOM_ID: Exam/1
  :EXPORT_TITLE: Exam 1
  :EXPORT_DATE:  {{{DATE_EXAM_1}}}
  :TIME: 75 Minutes
  :END:
  #+END_EXAMPLE
**** Section Subtrees
#+ATTR_REVEAL: :frag (appear)
Each exam in the {{{Course}}} has two section subtrees. Instructors
may add additional sections. Each subtree has section-specific
information about the exam in their =:PROPERTIES:=. Each section can
have multiple versions of the same exam (e.g., =A= and =B= versions),
with each version beloning to a separate subtree. The exam content
includes a title page, multiple choice questions, and short
answers. See the example and note below.
  
  #+LATEX: {\small
  #+BEGIN_EXAMPLE
  ,*** 01
  :PROPERTIES:
  :EXPORT_AUTHOR: {{{COURSE_NUM}}}-01: {{{COURSE}}}
  :ANSWER:
  :END:
  ,**** A Type
  :PROPERTIES:
  ,#+INCLUDE: "2020 Spring.org::#Exam/Title Page" :only-contents t
  ,***** Multiple Choice                                               :newpage:
  (2 points each, unless otherwise specified)
  ,#+INCLUDE: "2020 Spring.org::#Exam/1/MC/A" :only-contents t
  ,***** Short Answers                                                 :newpage:
  ,#+INCLUDE: "2020 Spring.org::#Exam/1/Short Answers" :only-contents t
  #+END_EXAMPLE
  #+LATEX: }

  #+REVEAL: split
  
#+BEGIN_mdframed
Note that the property =:ANSWER:= is empty. This is to hide answers for
multiple choice questions--see =Exam Contents/Multiple Choice= for details.
#+END_mdframed
**** =Exam Content= Subtree
#+ATTR_REVEAL: :frag (appear)
The =Exam Content= subtree contains exam questions. Its content can be
pulled in section-specific exam subtrees to create exams. The =Exam Content= subtree
can also be used to create exam keys by exporting the version subtree
(e.g., =Type A (Key)=) under =Exam Content/Multiple Choice=. 

  #+LATEX: {\small
  #+BEGIN_EXAMPLE
  ,*** Exam Content
  ,**** Multiple Choice
  :PROPERTIES:
  ,***** Type A (Key)
  ,***** Type B (Key)
  ,**** Short Answers                                                  :newpage:
  :PROPERTIES:
  ,#+INCLUDE: "../../../Topics/Org_Teaching.org::#Question/SA" :only-contents t
  #+END_EXAMPLE
  #+LATEX: }
**** Multiple Choice
#+ATTR_REVEAL: :frag (appear)
The {{{Course}}} exams have two versions (type A and B). The two
versions have the same multiple choice questions in the same order,
but the choice options are in different orders. 

#+BEGIN_mdframed
To create a new version, an instructor may first create a duplicate of the
original version subtree and use the =Alt+Up= or =Alt+Down= keys on the choice
options to change their orders. Pressing =C-c C-c= automatically re-numbers the
items in the list.
#+END_mdframed

The example below shows a
subset of content in the =Multiple Choice= tree.

  #+LATEX: {\small
  #+BEGIN_EXAMPLE
  ,**** Multiple Choice
  :PROPERTIES:
  :ANSWER: \checkmark
  :END:
  ,***** Type A (Key)
  :PROPERTIES:

  1. Which of the following is a vegetable?
     1. Okra
     2. Carrot {{{property(ANSWER)}}}
     3. Eggplant
     4. Pepper

  ,***** Type B (Key)
  :PROPERTIES:

  1. Which of the following is a vegetable?
     1. Okra
     2. Pepper
     3. Eggplant
     4. Carrot {{{property(ANSWER)}}}
  #+END_EXAMPLE
  #+LATEX: }
  
#+BEGIN_mdframed
The answer to each multiple choice question is marked with the macro
={{{property(ANSWER)}}}= and the =Multiple Choice= tree has the property of =:ANSWER:
\checkmark=. Hence, an instructor can export the version subtree (e.g., =Type A
(Key)=) to obtain the answer keys, with correct answers marked by a checkmark symbol.

#+END_mdframed

#+REVEAL: split

**** Short Answers
#+ATTR_REVEAL: :frag (appear)
Since open-ended questions do not typically require multiple versions,
one can have such questions in the corresponding topic Org file
(e.g., under the =Questions= top-level tree) and include them here.
*** Assignments Top-level Tree
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Assignments
:END:
#+ATTR_REVEAL: :frag (appear)
- Instructors can create assignments as they do lecture content using Org mode.
- Assignment instructions may be created in the =Assignments= top-level
  tree of a topic Org file, which are then included here.
- See =Org_Teaching/2020 Spring/2020 Spring.org= for an example.
*** =Local Variables= Top-level Tree
:PROPERTIES:
:CUSTOM_ID: Lectures/Semester Org Files/Local Variables
:END:
#+ATTR_REVEAL: :frag (appear)
=Local variables= top-level tree has file-local variables. See the
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html#Specifying-File-Variables][Emacs manual]] for more information. File-local variables include the
options to (a) skip confirmation on running elisp-link functions
(=org-confirm-elisp-link-function: nil=), (b) allow property
inheritance (=org-use-property-inheritance: t=), which is important
for many functionalities of the {{{COURSE}}} to work properly, and (c)
change the default timestamp format.

The following shows the content of this subtree.

#+REVEAL: split

  #+LATEX: {\small
  #+BEGIN_EXAMPLE
  # Local Variables:
  # org-confirm-elisp-link-function: nil
  # org-export-babel-evaluate: 'inline-only
  # org-use-property-inheritance: t
  # org-time-stamp-custom-formats: ("<%a, %b %d, %Y>" . "<%a, %b %d, %Y %l:%M%p>")
  # org-latex-active-timestamp-format: "%s"
  # org-latex-inactive-timestamp-format: "%s"
  # End:
  #+END_EXAMPLE
  #+LATEX: }
** Creating Content for Slides and Handouts
:PROPERTIES:
:CUSTOM_ID: Lectures/Creating Content
:END:
*** Introduction
:PROPERTIES:
:CUSTOM_ID: Lectures/Creating Content/Introduction
:END:
Content is created using the Org markup language. General information on how
to use the markeup language can be found in the [[https://orgmode.org/manual/Markup.html][Org manual]]. Hence,
we focus on common slide- and handout-related tasks that cannot be achieved
with common Org markup language. These tasks require either raw HTML tags or
LaTeX code, or custom Emacs lisp code. For tasks that require custom Emacs
Lisp code, users can put code snippets we present here into their Emacs init
file.

#+BEGIN_mdframed
We use reveal.js as the default slide format, and while Beamer slides are not
completely supported by {{{COURSE}}} yet, in some cases we do provide the same
functionality for Beamer as well as reveal.js. In those cases we have a
note describing how to achieve the functionality in Beamer.
#+END_mdframed

*** Using Raw HTML and LaTeX Code
:PROPERTIES:
:CUSTOM_ID: Lectures/Creating Content/Using Raw HTML and LaTeX Code
:END:

Directly quoting raw HTML tags and LaTeX code allows users to have granular
control over how contents are presented. Such quotes will be only included in
their corresponding outputs that are HTML-based (e.g., reveal.js) and
LaTeX-based, respectively. Hence, to understand the information that follow,
the readers should be familiar with the information in the Org manual on
[[https://orgmode.org/manual/Quoting-HTML-tags.html][Quoting HTML tags]] and [[https://orgmode.org/manual/Quoting-LaTeX-code.html][Quoting LaTeX code]].

#+BEGIN_mdframed
*Inline Raw Code*

To use Org macros with raw LaTeX code (e.g., surround a macro with
LaTeX code), use =@@latex:your code here@@= (same grammar
applies to HTML as well) like the following:

  #+BEGIN_EXAMPLE
  @@latex:{\small@@ {{{COURSE}}} @@latex:}@@
  #+END_EXAMPLE
#+END_mdframed
*** Features for Both Slides and Handouts
:PROPERTIES:
:CUSTOM_ID: Lectures/Creating Content/Misc
:END:
**** Specifying Attributes
Org mode allows users to specify attributes to raw HTML tags or LaTeX code
using =#+ATTR_FORMAT:= grammar. For example, the following shows how to 
specify the width of an image.

#+BEGIN_EXAMPLE
,#+ATTR_HTML: :width 80%
[[/img/image.png]]
#+END_EXAMPLE

For more information, see the [[https://orgmode.org/worg/org-tutorials/images-and-xhtml-export.html][tutorial on Images and XHTML export]].

**** Changing Font Sizes
One of the frequently used use cases of raw HTML or LaTeX code in Org markup
is changing the font size of a specific text. 

For example, to apply a smaller
font size in HTML outputs, the user can use the following code.

  #+BEGIN_SRC text
  ,#+HTML: <span style=font-size:20pt>
  Content with smaller font
  ,#+HTML: </span>
  #+END_SRC

  #+REVEAL: split

In LaTeX handouts, the user can use the code below.

  #+BEGIN_SRC text
  ,#+LATEX: {\small
  Content with smaller font
  ,#+LATEX: }
  #+END_SRC

  #+REVEAL: split

Since raw code that is irrelevant to the specific output format (e.g.,
HTML codes in a LaTeX output) will be ignored, users can safely combine 
HTML and LateX codes and use them together like so:

    #+BEGIN_SRC text
    ,#+LATEX: {\small
    ,#+HTML: <span style=font-size:20pt>
    Content with smaller font
    ,#+HTML: </span>
    ,#+LATEX: }
    #+END_SRC
**** Using a Dummy Heading
Instructors may want the option to present content of a tree without its heading. To do so, follow the instructions at
https://orgmode.org/worg/org-hacks.html#ignoreheadline. Specifically, include the
following in your init file, and any header with the =:ignore:= tag will not be printed in exported outputs.

#+BEGIN_SRC emacs-lisp
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+END_SRC
*** Slides: Features for reveal.js
:PROPERTIES:
:CUSTOM_ID: Lectures/Creating Content/reveal.js
:END:

#+BEGIN_mdframed
Note that reveal.js is HTML-based, so any raw HTML tags (e.g., via =#+HTML:=)
or attributes (e.g., via =#+ATTR_HTML:=) will be applied to reveal.js as well
as all HTML-based output formats.  For codes that are only for reveal.js, one
should use =#+REVEAL:= (=#+ATTR_REVEAL:=) instead of =#+HTML:=
(=#+ATTR_HTML:=) to avoid unnecessary tags being exported.
#+END_mdframed

**** List Fragments
One can easily obtain list fragments (make items in the list appear
sequentially) using reveal.js. Simply add =#+ATTR_REVEAL: :frag
(appear)= before the list. See the example below.

  #+BEGIN_SRC text
  ,#+ATTR_REVEAL: :frag (appear)
  - I appear first.
  - I appear second.
  - I appear third.
  #+END_SRC
  
#+BEGIN_mdframed
Similarly, a list fragment can be obtained on the Beamer output by including
=#+ATTR_BEAMER: :overlay <+->= before the list.
#+END_mdframed
  
**** Splitting slides
To split content into multiple slides, insert the following code between the areas where you want the split to happen.

  #+BEGIN_SRC text
  ,#+REVEAL: split
  #+END_SRC

#+BEGIN_mdframed
Similarly, a frame break can be inserted in Beamer by using =#+BEAMER:
\framebreak=.
#+END_mdframed

**** Embedding Youtube videos
One can use the following example to embed a YouTube video in a slide. The
example specifies at which points of the video the viewing will start
(1 second in) and end (60 seconds in).
  #+LATEX: {\small
  #+BEGIN_SRC text
  ,#+BEGIN_EXPORT HTML
  <iframe width="1066" height="570"
  src="https://www.youtube.com/embed/SzA2YODtgK4?start=01&end=60" allowfullscreen>
  </iframe>
  ,#+END_EXPORT
  #+END_SRC
  #+LATEX: }
**** Speaker Notes
An instructor may create a speaker note that accompanies a lecture
slide. reveal.js will display the speaker note in a separate browser
window. To create a speaker note, use a =NOTES= block as shown in the example
below.

#+BEGIN_SRC text
,#+BEGIN_NOTES
- This is a speaker note.
,#+END_NOTES
#+END_SRC
  
#+REVEAL: split

The following code needs to be inserted in the init file to hide speaker
notes in LaTeX, reStructuredText, and HTML output formats.

#+BEGIN_mdframed
Note that using the example code below will also make speaker notes appear
properly on Beamer.
#+END_mdframed

#+REVEAL_HTML: <span style=font-size:20pt>
#+LATEX: {\small
#+BEGIN_SRC emacs-lisp
(defun my/process-NOTES-blocks (text backend info)
  "Filter NOTES special blocks in export."
  (cond
   ((eq backend 'latex)
    (if (string/starts-with text "\\begin{NOTES}") ""))
   ((eq backend 'rst)
    (if (string/starts-with text ".. NOTES::") ""))
   ((eq backend 'html)
    (if (string/starts-with text "<div class=\"NOTES\">") ""))
   ((eq backend 'beamer)
    (let ((text (replace-regexp-in-string "\\\\begin{NOTES}" "\\\\note{" text)))
      (replace-regexp-in-string "\\\\end{NOTES}" "}" text)))
   ))

(eval-after-load 'ox '(add-to-list
                       'org-export-filter-special-block-functions
                       'my/process-NOTES-blocks))
#+END_SRC
#+LATEX: }
#+REVEAL_HTML: </span>
*** Handouts: Features for LaTeX
:PROPERTIES:
:CUSTOM_ID: Lectures/Creating Content/LaTeX
:END:
The features introduced in this section are readily available, as the
necessary items in the LaTeX preamble enabling the features are already
specified in the properties of the =Lectures= subtree in the semester Org
files of the {{{COURSE}}}.
**** Inserting Boxed Paragraphs
With the =mdframed= block, users can easily create boxed paragraphs in LaTeX 
handouts. The example below shows the code for the box and what the box will
look like in the handout. Note that the title of the box is written in bold
instead of using =#+ATTR_LATEX: :options [frametitle={Title of the box}]=
option, so the title gets printed in both reveal.js and LaTeX outputs.

#+REVEAL: split

#+BEGIN_SRC text
,#+BEGIN_mdframed
*Title of the box*

Content of the box
,#+END_mdframed
#+END_SRC

#+BEGIN_mdframed
*Title of the box*

Content of the box
#+END_mdframed

Optionally, users can choose to add the following code to their init file so
=mdframed= boxes are automatically converted to =note= directives in
reStructuredText export.

#+REVEAL_HTML: <span style=font-size:20pt>
#+LATEX: {\small
#+BEGIN_SRC emacs-lisp
(defun my/process-mdframed-blocks (text backend info)
  "Filter mdframed special blocks in export."
  (cond
   ((org-export-derived-backend-p backend 'rst)
      (replace-regexp-in-string ".. mdframed::" ".. note::" text t t))
   ))

(eval-after-load 'ox '(add-to-list
                       'org-export-filter-special-block-functions
                       'my/process-mdframed-blocks))
#+END_SRC
#+LATEX: }
#+REVEAL_HTML: </span>
**** Organizing Content in Multiple Columns
One can easily make parts of the handout multi-column. The example
below shows the code for creating two columns and what that will look like in
the handout.
  
  #+BEGIN_SRC text
  ,#+LATEX: \begin{multicols}{2}
  This is content in the first column.
  This is content in the first column.
  This is content in the first column.

  This is content in the second column.
  This is content in the second column.
  This is content in the second column.
  ,#+LATEX: \end{multicols}
  #+END_SRC

  #+LATEX: \begin{multicols}{2}
  This is content in the first column.
  This is content in the first column.
  This is content in the first column.

  This is content in the second column.
  This is content in the second column.
  This is content in the second column.
  #+LATEX: \end{multicols}
** Exporting Slides and Handouts
:PROPERTIES:
:CUSTOM_ID: Lectures/Exporting
:END:
*** Introduction
:PROPERTIES:
:CUSTOM_ID: Lectures/Exporting/Introduction
:END:

Org mode provides powerful export functionalities, which enable users to
convert Org markup content to a variety of other formats. The outputs have proper
formatting while maintaining the original structure and markup. 
The {{{COURSE}}} is set up to use reveal.js for slides and LaTeX for
handouts. Users can adapt the current setting to accomodate other output
formats.

General information about exporting can be found in the [[https://orgmode.org/manual/Exporting.html][Org manual]]. Hence,
this lecture focuses on describing how exporting is set up in the
{{{COURSE}}}, introducing pre-built export functionalities of the
{{{COURSE}}}, and offering useful exporting tips for instructors.
**** Setting Export Scope to =Subtree=
The export command, =org-export-dispatch= (=C-c C-e=), takes the user
to the =Org Export Dispatcher= interface. Here, the user can select
whether to export the buffer (i.e., the whole file) or only a
subtree. An instructor may use the former to create a course
booklet and the latter to export slides for a full or part of a
lecture. The default scope of Org mode is =Buffer=, but a user can put the following snippet in
the Emacs init file to set the default scope to =Subtree=.

  #+BEGIN_SRC emacs-lisp
  ;; set the default export scope to subtree
  (setf org-export-initial-scope 'subtree)
  #+END_SRC
**** Export Settings
Org mode allows users to specify [[https://orgmode.org/manual/Export-settings.html][export settings]] at both buffer and subtree levels.
***** Buffer-Level Settings
For buffer-level settings, one can use the =#+OPTIONS:= statement. For
example, including the following line in an Org file will include a table
of contents for that file in the exported document:

#+BEGIN_EXAMPLE
#+OPTIONS: toc:t
#+END_EXAMPLE

Similarly including the following line will add numbers in front of the headings.

#+BEGIN_EXAMPLE
#+OPTIONS: num:t
#+END_EXAMPLE

***** Subtree-Level Settings
Export settings can be specified at the subtree level with
=:PROPERTIES:=. Simply add =:EXPORT_:= as a prefix to each option. For
example, the title of the document can be set with
=:EXPORT_TITLE:=. To specify multiple settings (e.g., items for LaTeX preamble),
one can add =+= to the property name to append an additional value.  For example,

#+BEGIN_EXAMPLE
:PROPERTIES:
:EXPORT_LATEX_HEADER+: \usepackage{titling}
:EXPORT_LATEX_HEADER+: \usepackage{multicol}
:END:
#+END_EXAMPLE
*** Buttons and Keybindings for Exporting
:PROPERTIES:
:CUSTOM_ID: Lectures/Exporting/Clickable Links and Keybindings
:END:
**** Buttons
#+ATTR_REVEAL: :frag (appear)
We include export buttons (in the form of links written in Emacs-lisp) in the
properties of any exportable subtree in the {{{COURSE}}} (e.g.,
lectures, syllabi, and exams).

For example, each lecture headline comes with the =:EXPORT_TO:=
property, which includes buttons such as =reveal.js= and
=LaTeX=. These buttons will export files to their respective format,
using =Subtree= as the export scope.

After exporting, users can click on buttons in the =:VIEW_OUTPUT:=
property (e.g., =HTML= or =PDF=) to open the exported files.

**** Key Bindings
#+ATTR_REVEAL: :frag (appear)
Using the command=org-export-dispatch= (=C-c C-e=) when exporting a
content allows users to later repeat the last export action for that
same content using the prefix argument (=C-u=). This is a convenient
feature when exporting the same content multiple times.

#+REVEAL: split
  
{{{VSPACE(5)}}}

#+BEGIN_mdframed
Note that the cursor shoud be in the correct position (heading,
properties, or spaces between the heading and its first subheading) of
the subtree being exported. When using =C-u C-c C-e= for repeated
export, however, the cursor position does /not/ matter as long as the
same buffer which contains the last exported subtree is open.
#+END_mdframed

{{{VSPACE(5)}}}

#+REVEAL: split

#+ATTR_REVEAL: :frag (appear)
To bind =C-u C-c C-e= to a key (=F5= in this example), include
the following Emacs-lisp code in into the init file:

#+BEGIN_SRC emacs-lisp
;; bind f5 to keyboard macro of export-last-subtree
(fset 'export-last-subtree
      "\C-u\C-c\C-e")

(eval-after-load "org"
  '(progn
     (define-key org-mode-map (kbd "<f5>") 'export-last-subtree)))
#+END_SRC
*** Exporting Slides: with reveal.js
:PROPERTIES:
:CUSTOM_ID: Lectures/Exporting/Slides
:END:
- See the [[https://github.com/yjwen/org-reveal/][org-reveal documentation]] for instructions on installation and usage.
*** Exporting Slides: with LaTeX
:PROPERTIES:
:CUSTOM_ID: Lectures/Exporting/Handouts
:END:
LaTeX export is extensively supported by Org mode. We refer users to the [[https://orgmode.org/manual/LaTeX-export.html#LaTeX-export][Org
manual]] for the in-depth instructions.

The following snippet shows the basic setup for our LaTeX output,
where the =koma-article= class is added to =org-latex-classes= and the
=minted= package is used for syntax highlighting. Currently, Python is
the only language added to =org-latex-minted-langs=. Users can add to
=org-latex-minted-langs= any other languages they want processed with
the =minted= package.

#+BEGIN_mdframed
Note that we manually added the =minted= package to LaTeX preambles as opposed to adding
it to =org-latex-packages-alist=. This was to allow for flexible specifications of the =outputdir= option.
#+END_mdframed

#+LATEX: {\small
#+BEGIN_SRC emacs-lisp
(eval-after-load 'ox '(require 'ox-koma-letter))

(eval-after-load 'ox '(add-to-list 'org-latex-classes
                                   '("koma-article"
                                     "\\documentclass{scrartcl}"
                                     ("\\section{%s}" . "\\section*{%s}")
                                     ("\\subsection{%s}" . "\\subsection*{%s}")
                                     ("\\subsubsection{%s}"
                                      . "\\subsubsection*{%s}")
                                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                     ("\\subparagraph{%s}"
                                      . "\\subparagraph*{%s}"))) )

(require 'ox-latex)
(setq org-latex-listings 'minted)

(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(add-to-list 'org-latex-minted-langs '(python "python"))
#+END_SRC
#+LATEX: }

**** Inserting a Page Break Before a Heading in LaTeX Export
Users can add a page break in the LaTeX export by inserting
~#+LATEX: \clearpage~. Importantly, adding the following code into the init file
automatically inserts a page break before any subtree that has a ~:newpage:~
tag.

#+LATEX: {\small
#+BEGIN_SRC emacs-lisp
(defun org/get-headline-string-element  (headline backend info)
  "Return the org element representation of an element.

  Won't work on ~verb~/=code=-only headers"
  (let ((prop-point (next-property-change 0 headline)))
    (if prop-point (plist-get (text-properties-at prop-point headline) :parent))))

(defun org/ensure-latex-clearpage (headline backend info)
  (when (org-export-derived-backend-p backend 'latex)
    (let ((elmnt (org/get-headline-string-element headline backend info)))
      (when (member "newpage" (org-element-property :tags elmnt))
        (concat "\\clearpage\n" headline)))))

(eval-after-load 'ox '(add-to-list
                       'org-export-filter-headline-functions
                       'org/ensure-latex-clearpage))
#+END_SRC
#+LATEX: }
*** Selective Export
:PROPERTIES:
:CUSTOM_ID: Lectures/Exporting/Selective Export
:END:
By using raw code and custom Emacs-lisp scripts, users can flexibly choose
which content to show/hide, depending on output format. For example,
instructors may want to show images in slides but not in handouts, or they may
want to include supplementary notes in handouts but not in slides.
**** Tagging a Subtree as Slide or Handout Only
:PROPERTIES:
:CUSTOM_ID: Lectures/Exporting/Slide and Handout Only
:END:
With the code below in added to your init file, you can use the =:slideonly:=
or =:handoutonly:= tags to selectively include a subtree in either a slide
output or handout output, respectively. Currently LaTeX and =rst= backends is
set as a handout output, and reveal.js and beamer backends are set as slide
outputs.

For example,

  #+BEGIN_EXAMPLE
  ,* This subtree will only be exported in slide output      :slideonly:
  - Content
  ,* This subtree will only be exported in handout output    :handoutonly:
  - Content
  #+END_EXAMPLE
  
  #+LATEX: {\small
  #+BEGIN_SRC emacs-lisp
  (defun org/parse-headings (backend)
    "Remove every headline with certain tags in the
    current buffer. BACKEND is the export back-end being used, as
    a symbol.
  
    "
  
    (if (member backend '(latex rst))
        (org-map-entries
         (lambda ()
           (progn
             (org-narrow-to-subtree)
             (org-cut-subtree)
             (widen)
             ))
         "+slideonly"))
  
    (if (member backend '(reveal beamer))
        (org-map-entries
         (lambda ()
           (progn
             (org-narrow-to-subtree)
             (org-cut-subtree)
             (widen)
             ))
         "+handoutonly"))
  
  )
  
  (add-hook 'org-export-before-parsing-hook 'org/parse-headings)
  #+END_SRC
  #+LATEX: }
**** Hiding Specific Content
To hide content when exporting to HTML-based format outputs (slides), use raw
HTML tags ~<span hidden>~ and ~</span>~. See the example below.

  #+LATEX: {\small
  #+BEGIN_SRC html
  #+REVEAL_HTML: <span hidden>
  This will not be shown in reveal.js output
  #+REVEAL_HTML: </span>
  #+END_SRC
  #+LATEX: }

Similarly, any content placed between ~\iffalse~ and ~\fi~ will not be
rendered in LaTeX outputs (handouts). See the example below.

  #+LATEX: {\small
  #+BEGIN_SRC text
  ,#+LATEX: \iffalse
  This will not be shown in LaTeX output
  ,#+LATEX: \fi
  #+END_SRC
  #+LATEX: }
* Assignments
** Assignment 1
:PROPERTIES:
:CUSTOM_ID: Assginment/1
:END:
*** Instructions
:PROPERTIES:
:CUSTOM_ID: Assginment/1/Instructions
:END:
In this assignment, you are to create a new class, by adapting ={{{COURSE}}}=.
*** Rubrics
- Rubrics for assignment

* Exercises
** Exercise 1
:PROPERTIES:
:CUSTOM_ID: Exercise/1
:END:
** Exercise 2
:PROPERTIES:
:CUSTOM_ID: Exercise/2
:END:
* Questions
** Question 1
:PROPERTIES:
:CUSTOM_ID: Question/1
:END:
** Short Answer
:PROPERTIES:
:CUSTOM_ID: Question/SA
:END:
   #+ATTR_LATEX: :options [style=exampledefault, frametitle={}]
   #+BEGIN_mdframed
   Please answer the following short answer questions each with no more than 3
   sentences.
   #+END_mdframed

1. Describe how to include the content of a subtree from another org file, excluding its heading.

   {{{VSPACE(50)}}}

